<?php

// $Id: wurfl.module,v 1.2.2.7 2010/06/23 16:21:05 kharbat Exp $

define('WURFL_XML', drupal_get_path('module', 'wurfl') . '/resources/wurfl.xml');
define('WURFL_CVS', 'http://wurfl.cvs.sourceforge.net/viewvc/wurfl/xml/wurfl.xml');
define('WURFL_IMAGES', drupal_get_path('module', 'wurfl') . '/resources/device_pix/');
define('WURFL_NODEVICE_IMAGE', drupal_get_path('module', 'wurfl') . '/resources/no-device.png');

module_load_include('inc', 'wurfl', 'includes/wurfl.class');
module_load_include('inc', 'wurfl', 'includes/wurfl.parser');

/**
 * Implementation of hook_init().
 */
function wurfl_init() {
	$ua = $_SERVER['HTTP_USER_AGENT'];;
	$device = new wurfl($ua, TRUE);
	$GLOBALS['wurfl_device'] = (is_object($device) ? $device : new stdClass());
	// TODO: append user agent to database if not detected
}

/**
 * Implementation of hook_menu().
 */
function wurfl_menu() {
  $items['admin/build/wurfl'] = array(
    'title' => 'WURFL',
    'access arguments' => array('administer wurfl'),
    'page callback' => 'wurfl_overview',
    'description' => t('Administer WURFL. List, test and update device entries.'),
    'file' => 'includes/wurfl.admin.inc',
  );
  $items['admin/build/wurfl/list'] = array(
    'title' => 'List',
    'weight' => -10,
    'access arguments' => array('administer wurfl'),
    'page callback' => 'wurfl_overview',
    'file' => 'includes/wurfl.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/build/wurfl/test'] = array(
    'title' => 'Test',
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer wurfl'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wurfl_test_form'),
    'description' => 'WURFL Test Devices Capabilities',
    'file' => 'includes/wurfl.admin.inc',
  ); 
  $items['admin/build/wurfl/test/callback'] = array(
    'title' => 'Test',
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer wurfl'),
    'page callback' => 'wurfl_test_callback',
    'description' => 'WURFL Test Devices Capabilities',
    'file' => 'includes/wurfl.admin.inc',
  );
  $items['wurfl/test'] = array(
    'title' => 'WURFL Realtime Test',
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('access content'),
    'page callback' => 'wurfl_test',
    'description' => 'WURFL Test Devices Capabilities',
    'file' => 'includes/wurfl.admin.inc',
  );        
  $items['admin/build/wurfl/update'] = array(
    'title' => 'Update',
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer wurfl'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wurfl_update_form'),
    'description' => 'Update WURFL device entries',
    'file' => 'includes/wurfl.admin.inc',
  );    
  $items['admin/build/wurfl/add'] = array(
    'title' => 'Add WURFL Device',
    'access arguments' => array('administer wurfl'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wurfl_add_form'),
    'file' => 'includes/wurfl.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/build/wurfl/edit/%wurfl'] = array(
    'title' => 'Edit WURFL Device',
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer wurfl'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wurfl_edit_form', 4),
    'file' => 'includes/wurfl.admin.inc',
  );  
  $items['admin/build/wurfl/delete/%wurfl'] = array(
    'title' => 'Delete wurfl',
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer wurfl'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wurfl_delete_form'),
    'file' => 'includes/wurfl.admin.inc',
  );

  return $items;
}


function wurfl_form_alter(&$form, &$form_state, $form_id) {

}


/**
* Implementation of hook_views_api().
*/
function wurfl_views_api() {
 return array(
   'api' => 2.0,
   'path' => drupal_get_path('module', 'wurfl') . '/includes',
 );
}

/**
 * Implementation of hook_perm().
 */
function wurfl_perm() {
	return array('administer wurfl');
}

/**
 *  Implementation of hook_is_mobile_device() as being used by the Mobile Tools module
 */ 
function wurfl_is_mobile_device() {
 	global $wurfl_device;
 	
 	// This is strange, return value is string, not boolean
  return ($wurfl_device->capabilities['product_info']['is_wireless_device'] ? 'mobile' : 'desktop');
}

/**
 *  Implementation of hook_devicecapability as defined by 
 *  the mobile_tools module 
 */ 
function wurfl_devicecapability($capability, $ua = null) {
	if($ua) {
		$device = new wurfl($ua);
		return $device->getCapability($capability);
			
	} else {
		
		global $wurfl_device;
		return $wurfl_device->getCapability($capability);		
	}
}